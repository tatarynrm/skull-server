import { Scenes, Markup } from "telegraf";
import { pool } from "../../db/pool";
import { Lang, MyContext } from "../types/bot-context";
import { t } from "../lib/i18n";
import { getBeforeRegisterKeyboard, getMainKeyboard } from "../keyboards";
import { getLanguageKeyboard } from "../helpers/language";
import { profileService } from "../../services/profile.service";
import { BotScenes } from "./types";
import { tgProfileService } from "../services/profile.service";

// –°—Ü–µ–Ω–∞ –∑–º—ñ–Ω–∏ –º–æ–≤–∏
const changeLanguageScene = new Scenes.WizardScene<MyContext>(
  BotScenes.CHANGE_LANGUAGE,
  // –ö—Ä–æ–∫ 1: –ø–æ–∫–∞–∑—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –≤–∏–±—ñ—Ä –º–æ–≤
  async (ctx) => {
    await ctx.reply(
      t(ctx.lang, "change_language_from_keyboard"),
      getLanguageKeyboard()
    );
    return ctx.wizard.next();
  },
  // –ö—Ä–æ–∫ 2: –æ–±—Ä–æ–±–ª—è—î–º–æ –≤–∏–±—ñ—Ä –º–æ–≤–∏
  async (ctx) => {
    if (!ctx.message || !("text" in ctx.message)) return;

    const text = ctx.message.text;

    // –í–∏—Ö—ñ–¥ –∑—ñ —Å—Ü–µ–Ω–∏ –ø—Ä–∏ /start –∞–±–æ /help
    if (text.startsWith("/start") || text.startsWith("/help")) {
      await ctx.reply("–û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó", {
        reply_markup: getBeforeRegisterKeyboard(ctx),
      });
      await ctx.scene.leave();
      return;
    }

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –º–æ–≤—É
    let lang: Lang | null = null;
    if (text.includes("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶")) lang = "uk";
    if (text.includes("Polski üáµüá±")) lang = "pl";
    if (text.includes("Deutsch üá©üá™")) lang = "de";
    if (text.includes("English üá¨üáß")) lang = "en";
    if (text.includes("Espa√±ol üá™üá∏")) lang = "es";
    if (text.includes("Fran√ßais üá´üá∑")) lang = "fr";
    if (text.includes("Italiano üáÆüáπ")) lang = "it";

    if (!lang) {
      await ctx.reply(t(ctx.lang, "change_language_from_keyboard"));
      return;
    }

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º–æ–≤—É –≤ –ë–î
    await pool.query(`UPDATE tg_user SET lang = $1 WHERE tg_id = $2`, [
      lang,
      ctx.message.from.id,
    ]);

    // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    ctx.lang = lang;

    // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –ø–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é

    const profile = await tgProfileService.getProfileByUserId(
      ctx.message.from.id
    );

    if (!profile) {
      await ctx.reply(
        t(ctx.lang, "language_updated", { lng: ctx.lang.toUpperCase() }),
        {
          reply_markup: getBeforeRegisterKeyboard(ctx),
        }
      );
    } else {
      await ctx.reply(
        t(ctx.lang, "language_updated", { lng: ctx.lang.toUpperCase() }),
        {
          reply_markup: getMainKeyboard(ctx),
        }
      );
    }

    await ctx.scene.leave();
  }
);
changeLanguageScene.use(async (ctx: MyContext, next) => {
  if (ctx.message && "text" in ctx.message) {
    const text = ctx.message.text;

    const profile = await tgProfileService.getProfileByUserId(
      ctx.message.from.id
    );

    if (
      text.startsWith("/profile") ||
      text.startsWith("/help") ||
      text.includes(t(ctx.lang, "back_to_menu"))
    ) {
      if (profile) {
        await ctx.reply(t(ctx.lang, "main_menu"), {
          reply_markup: getMainKeyboard(ctx),
        });
        await ctx.scene.leave(); // –≤–∏—Ö–æ–¥–∏–º–æ –∑—ñ —Å—Ü–µ–Ω–∏
        return; // –Ω–µ –≤–∏–∫–æ–Ω—É—î–º–æ –ø–æ–¥–∞–ª—å—à—ñ –∫—Ä–æ–∫–∏ —Å—Ü–µ–Ω–∏
      } else {
        await ctx.reply(t(ctx.lang, "main_menu"), {
          reply_markup: getBeforeRegisterKeyboard(ctx),
        });
        await ctx.scene.leave(); // –≤–∏—Ö–æ–¥–∏–º–æ –∑—ñ —Å—Ü–µ–Ω–∏
      }
    }
  }
  return next(); // –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑–≤–∏—á–∞–π–Ω—É –æ–±—Ä–æ–±–∫—É —Å—Ü–µ–Ω–∏
});
export default changeLanguageScene;
