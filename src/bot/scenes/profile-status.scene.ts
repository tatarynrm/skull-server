import { Scenes } from "telegraf";
import { MyContext } from "../types/bot-context";
import { t } from "../lib/i18n";
import { getMainKeyboard } from "../keyboards";
import { BotScenes } from "./types";
import { profileService } from "../../services/profile.service";
import { tgProfileService } from "../services/profile.service";
import { redis } from "../../utils/redis";

// –ì–æ—Ç–æ–≤—ñ —Å—Ç–∞—Ç—É—Å–∏
const STATUSES = [
  "üëÖ Horny",
  "üòÉ Happy",
  "üò¢ Sad",
  "ü•± Bored",
  "ü§î Thoughtful",
  "üî• In the mood",
  "Delete status from profile",
];
function chunk<T>(arr: T[], size: number): T[][] {
  const result: T[][] = [];
  for (let i = 0; i < arr.length; i += size) {
    result.push(arr.slice(i, i + size));
  }
  return result;
}
const setProfileStatusScene = new Scenes.WizardScene<MyContext>(
  BotScenes.PROFILE_STATUS_SAVE,

  // –ö—Ä–æ–∫ 1: –ø–æ–∫–∞–∑–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç—É—Å—ñ–≤
  async (ctx) => {
    await ctx.reply("–û–±–µ—Ä—ñ—Ç—å —Å–≤—ñ–π —Å—Ç–∞—Ç—É—Å:", {
      reply_markup: {
        keyboard: [
          ...chunk(
            STATUSES.map((s) => ({ text: s })),
            2
          ), // –ø–æ 2 –≤ —Ä—è–¥
          [{ text: t(ctx.lang, "back_to_menu") }],
        ],
        resize_keyboard: true,
      },
    });
    ctx.wizard.next();
  },

  // –ö—Ä–æ–∫ 2: –æ–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  async (ctx) => {
    const userId = ctx.message?.from.id;
    if (ctx.message && "text" in ctx.message) {
      const text = ctx.message.text;

      console.log(text, "TESTTTTTTTTTTTTTT");

      // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ "–ù–∞–∑–∞–¥ —É –º–µ–Ω—é"
      if (text === t(ctx.lang, "back_to_menu")) {
        await ctx.reply(t(ctx.lang, "main_menu"), {
          reply_markup: getMainKeyboard(ctx),
        });
        return ctx.scene.leave();
      }

      // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–±—Ä–∞–≤ —Å—Ç–∞—Ç—É—Å –∑—ñ —Å–ø–∏—Å–∫—É
      if (STATUSES.includes(text) && text !== "Delete status from profile") {
        // –∑–±–µ—Ä–µ–≥—Ç–∏ —Å—Ç–∞—Ç—É—Å —É –ë–î
        const updated = await tgProfileService.updateStatus(
          ctx.message.from.id,
          text
        );

        if (updated) {
          await ctx.reply(`‚úÖ –í–∞—à —Å—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: ${text}`, {
            reply_markup: getMainKeyboard(ctx),
          });
          const cacheKey = `profile:${userId}`;

          // // 1Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Redis
          const cached = await redis.del(cacheKey);

          ctx.scene.leave();
        } else {
          await ctx.reply(t(ctx.lang, "system_something_went_wrong"));
          ctx.scene.leave();
        }

        return ctx.scene.leave();
      } else if (text === "Delete status from profile") {
        const updated = await tgProfileService.updateStatus(
          ctx.message.from.id,
          ""
        );
        if (updated) {
          await ctx.reply(`‚õî –í–∏ –≤–∏–º–∫–Ω—É–ª–∏ —Å—Ç–∞—Ç—É—Å`, {
            reply_markup: getMainKeyboard(ctx),
          });
          const cacheKey = `profile:${userId}`;

          // // 1Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Redis
          const cached = await redis.del(cacheKey);
          ctx.scene.leave();
        }
      } else {
        // —è–∫—â–æ –≤–≤–µ–¥–µ–Ω–æ —â–æ—Å—å —ñ–Ω—à–µ
        await ctx.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—É—Å –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏!");
      }
    }
  }
);

export default setProfileStatusScene;
