import { Scenes, Markup } from "telegraf";
import { MyContext } from "../types/scenesTypes";
import axios from "axios";
import { InputMediaPhoto } from "telegraf/typings/core/types/typegram";
import { pool } from "../../db/pool";
import { MainKeyboard } from "../keyboards/main_keyboard";

const getFileLink = async (ctx: any, fileId: string) => {
  try {
    const file = await ctx.telegram.getFile(fileId);
    const filePath = file.file_path;
    const fileUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${filePath}`;
    return fileUrl;
  } catch (error) {
    console.error("Error fetching file link:", error);
    return null;
  }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è –º—ñ—Å—Ç–∞ –∑–∞ –π–æ–≥–æ –Ω–∞–∑–≤–æ—é
const geocodeByCityName = async (city: string) => {
  const baseUrl =
    "https://maps.googleapis.com/maps/api/geocode/json?language=uk";
  const params = {
    address: city, // –¢–µ–ø–µ—Ä –ø–µ—Ä–µ–¥–∞—î–º–æ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –∑–∞–º—ñ—Å—Ç—å lat/lng
    key: process.env.GOOGLE_API_KEY, // –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –∫–ª—é—á API –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
  };
  try {
    const response = await axios.get(baseUrl, { params });
    if (response.status === 200) {
      const result = response.data;
      if (result.results.length > 0) {
        const address = result.results[0];
        return address;
      } else {
        return "–ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.";
      }
    } else {
      throw new Error(`Error ${response.status}: ${response.statusText}`);
    }
  } catch (error) {
    console.error(error);
    return "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∑–∞–ø–∏—Ç—É.";
  }
};

const registerScene = new Scenes.WizardScene<MyContext>(
  "register-wizard",
  async (ctx) => {
    await ctx.reply("–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?", {
      reply_markup: {
        remove_keyboard: true,
      },
    });
    return ctx.wizard.next();
  },
  async (ctx) => {
    if (ctx.message && "text" in ctx.message) {
      ctx.scene.session.registrationData =
        ctx.scene.session.registrationData || {};
      ctx.scene.session.registrationData.name = ctx.message.text;
      await ctx.reply("–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?");
      return ctx.wizard.next();
    }
  },
  async (ctx) => {
    if (ctx.message && "text" in ctx.message) {
      const age = parseInt(ctx.message.text);
      if (isNaN(age)) {
        return ctx.reply("–í–≤–µ–¥–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–∫.");
      }
      if (age < 14) {
        await ctx.reply(
          "–¢–∏ –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∏–π –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–∫."
        );
        return;
      }
      if (age > 80) {
        await ctx.reply(
          "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–∫, –æ—Å–∫—ñ–ª—å–∫–∏ —Ü–µ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π –≤—ñ–∫ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó."
        );
        return;
      }

      ctx.scene.session.registrationData.age = age;
      await ctx.reply("–•—Ç–æ —Ç–∏? –¢–∏ —Ö–ª–æ–ø–µ—Ü—å —á–∏ –¥—ñ–≤—á–∏–Ω–∞?", {
        reply_markup: {
          keyboard: [[{ text: "–•–ª–æ–ø–µ—Ü—å" }, { text: "–î—ñ–≤—á–∏–Ω–∞" }]],
          resize_keyboard: true,
        },
      });
      return ctx.wizard.next();
    }
  },
  async (ctx) => {
    if (ctx.message && "text" in ctx.message) {
      const sex = ctx.message.text;
      ctx.scene.session.registrationData.sex = sex;

      await ctx.reply("–í–∫–∞–∂–∏ –Ω–∞–∑–≤—É —Å–≤–æ–≥–æ –º—ñ—Å—Ç–∞ | —Å–µ–ª–∏—â–∞ | —Å–º—Ç", {
        reply_markup: { remove_keyboard: true },
      });

      return ctx.wizard.next();
    }
  },

  async (ctx) => {
    if (ctx.message && "text" in ctx.message) {
      const city = ctx.message.text;
      ctx.scene.session.registrationData.city = city;

      const geocodedAddress = await geocodeByCityName(city);

      if (
        geocodedAddress === "–ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ." ||
        geocodedAddress === "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∑–∞–ø–∏—Ç—É."
      ) {
        await ctx.reply("–ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!");
        return;
      }

      ctx.scene.session.registrationData.city =
        geocodedAddress?.address_components[0].long_name;
      ctx.scene.session.registrationData.latitude =
        geocodedAddress?.geometry.location.lat;
      ctx.scene.session.registrationData.longitude =
        geocodedAddress?.geometry.location.lng;

      await ctx.reply("–ö–æ–≥–æ —à—É–∫–∞—î—à? –í–∏–±–µ—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç:", {
        reply_markup: {
          keyboard: [[{ text: "–•–ª–æ–ø—Ü—ñ–≤" }, { text: "–î—ñ–≤—á–∞—Ç" }]],
          resize_keyboard: true,
        },
      });
      return ctx.wizard.next();
    }
  },

  async (ctx) => {
    if (ctx.message && "text" in ctx.message) {
      const lookingFor = ctx.message.text;
      ctx.scene.session.registrationData.lookingFor = lookingFor;

      await ctx.reply(
        "–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ, —è–∫–µ —Ç–∏ —Ö–æ—á–µ—à –¥–æ–¥–∞—Ç–∏ –¥–æ —Å–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é (–º–∞–∫—Å–∏–º—É–º 1).\n–ß–æ–º—É 1 ?\n–¢–æ–º—É —â–æ –≤ —Å—É—á–∞—Å–Ω–æ–º—É —Å–≤—ñ—Ç—ñ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ —â–æ–± –∑–∞–∫–æ—Ö–∞—Ç–∏—Å—å.\n–û–ø–∏—Å —Å–≤–æ—î—ó –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç—ñ - –Ω–∞–±–∞–≥–∞—Ç–æ –≤–∞–∂–ª–∏–≤—ñ—à–∏–π"
      );
      return ctx.wizard.next();
    }
  },

  async (ctx) => {
    if (ctx.message && "photo" in ctx.message) {
      const fileId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
      ctx.scene.session.registrationData.photos =
        ctx.scene.session.registrationData.photos || [];
      const link = await getFileLink(ctx, fileId);

      if (link) {
        ctx.scene.session.registrationData.photos.push({ url: link });
      }

      const photoCount = ctx.scene.session.registrationData.photos.length;



      // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–æ–¥–∞–≤ 1 —Ñ–æ—Ç–æ
      if (photoCount >= 1) {
        const data = ctx.scene.session.registrationData;
        ctx.scene.session.registrationData.user_id = ctx.message.from.id;

        const profileText = `–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞:\n\n–Ü–º'—è: ${data.name}\n–í—ñ–∫: ${data.age}\n–°—Ç–∞—Ç—å: ${data.sex}\n–ú—ñ—Å—Ç–æ: ${data.city}\n–®—É–∫–∞—î: ${data.lookingFor}`;

        await ctx.replyWithPhoto(
          { url: ctx.scene.session.registrationData.photos[0].url },
          {
            caption: profileText,
            reply_markup: {
              keyboard: [
                [{ text: "‚öô –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è" }],
                [{ text: "üåü Premium" }, { text: "üíå –ú–æ—ó –≤–ø–æ–¥–æ–±–∞–π–∫–∏" }],
                [{ text: "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ú–æ—ó —Ä–µ—Ñ–µ—Ä–∞–ª–∏" }, { text: "–ó–∞–ª–∏—à–æ–∫ ‚ù§Ô∏è" }],
                [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" }],
              ],
            },
          }
        );

        await ctx.reply("–©–æ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?", {
          reply_markup: {
            keyboard: [
              [
                { text: "–ü–µ—Ä–µ–∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É" },
                { text: "–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∑–Ω–∞–π–æ–º—Å—Ç–≤" },
              ],
            ],
            resize_keyboard: true,
          },
        });

        return ctx.wizard.next();
      }
    }

    if (ctx.message && "text" in ctx.message) {
      await ctx.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ.");
      return;
    }
  },
  async (ctx) => {
    if (ctx.message && "text" in ctx.message) {
      const action = ctx.message.text;
      const resultObject = ctx.scene.session.registrationData;

      if (action === "–¶–µ –≤—Å–µ, –π–¥–µ–º–æ –¥–∞–ª—ñ") {
        // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É "–¶–µ –≤—Å–µ, –π–¥–µ–º–æ –¥–∞–ª—ñ"
        await ctx.reply("–ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —Å—Ü–µ–Ω–∏...");
        return ctx.wizard.next(); // –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É —Å—Ü–µ–Ω–∏
      }

      if (action === "–ü–µ—Ä–µ–∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É") {
        // –°–∫–∏–¥–∞—î–º–æ –¥–∞–Ω—ñ —ñ –ø–æ—á–∏–Ω–∞—î–º–æ –∑–Ω–æ–≤—É
        ctx.scene.session.registrationData = {};
        await ctx.reply("–î–∞–≤–∞–π –ø–æ—á–Ω–µ–º–æ –∑–Ω–æ–≤—É!");
        await ctx.reply("–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?");
        return ctx.wizard.selectStep(1);
      }

      if (action === "–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∑–Ω–∞–π–æ–º—Å—Ç–≤") {
        const result = await pool.query(
          `
  INSERT INTO users_profiles (user_id, name, age, sex, city, latitude, longitude, looking_for, photos)
  VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
  ON CONFLICT (user_id)
  DO UPDATE SET
    name = EXCLUDED.name,
    age = EXCLUDED.age,
    sex = EXCLUDED.sex,
    city = EXCLUDED.city,
    latitude = EXCLUDED.latitude,
    longitude = EXCLUDED.longitude,
    looking_for = EXCLUDED.looking_for,
    photos = EXCLUDED.photos
  RETURNING *;
  `,
          [
            resultObject.user_id,
            resultObject.name,
            resultObject.age,
            resultObject.sex,
            resultObject.city,
            resultObject.latitude,
            resultObject.longitude,
            resultObject.lookingFor,
            resultObject.photos && resultObject.photos.length > 0
              ? resultObject.photos[0]?.url
              : null, // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ–æ—Ç–æ
          ]
        );

        // –¢—É—Ç –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –∑–Ω–∞–π–æ–º—Å—Ç–≤
        await ctx.reply("–¢–∏ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é", {
          reply_markup: MainKeyboard
        });
        return ctx.scene.leave();
      }
    }
  }
);

export default registerScene;
