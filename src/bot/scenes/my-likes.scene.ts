import { Scenes, Markup } from "telegraf";
import { pool } from "../../db/pool";
import { MyContext } from "../types/bot-context";
import { t } from "../lib/i18n";
import { getBeforeRegisterKeyboard, getMainKeyboard } from "../keyboards";
import { BotScenes } from "./types";
import { tgProfileService } from "../services/profile.service";
import bot from "../bot";
import { tgUserService } from "../services/user.serivice";

// –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function sendProfileCard(ctx: MyContext, profile: any) {
  const validPhotos = profile.photos?.filter((p: any) => p.url?.trim()) || [];

  if (!validPhotos.length) {
    await ctx.reply(
      `üë§ ${profile.name || ctx.from?.first_name} (${profile.age || "Age"})\nüìç ${profile.city || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}\nüìù ${profile.description || "–ë–µ–∑ –æ–ø–∏—Å—É"}\n__________________\nLooking age: ${profile.min_age} - ${profile.max_age}\nLooking for: ${profile.looking_for === 1 ? "üë¶" : profile.looking_for === 2 ? "üëß" : profile.looking_for === 3 ? "üë¶üëß" : "‚ùì"}\n${profile.status ? `Status: ${profile.status}` : "‚õîStatus is not set"}`,
      Markup.keyboard([["‚ù§Ô∏è –õ–∞–π–∫", "‚ùå –î–∏–∑–ª–∞–π–∫"]]).resize()
    );
    return;
  }

  const mediaGroup = validPhotos.map((photo: any, index: number) => ({
    type: "photo",
    media: photo.url,
    caption:
      index === 0
        ? `üë§ ${profile.name || ctx.from?.first_name} (${profile.age || "Age"})\nüìç ${profile.city || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}\nüìù ${profile.description || "–ë–µ–∑ –æ–ø–∏—Å—É"}\n${profile.status ? `Status: ${profile.status}` : "‚õîStatus is not set"}`
        : undefined,
  }));

  await ctx.replyWithMediaGroup(mediaGroup);
}

export async function sendProfileCardToAnotherUser(
  chatId: number,
  profile: any
) {
  const validPhotos = profile.photos?.filter((p: any) => p.url?.trim()) || [];

  // —è–∫—â–æ –Ω–µ–º–∞—î —Ñ–æ—Ç–æ ‚Üí –ø—Ä–æ—Å—Ç–∏–π —Ç–µ–∫—Å—Ç
  if (!validPhotos.length) {
    await bot.telegram.sendMessage(
      chatId,
      `üë§ ${profile.name || "–ë–µ–∑ —ñ–º–µ–Ω—ñ"} (${profile.age || "Age"})\nüìç ${
        profile.city || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
      }\nüìù ${profile.description || "–ë–µ–∑ –æ–ø–∏—Å—É"}\n__________________\nLooking age: ${
        profile.min_age
      } - ${profile.max_age}\nLooking for: ${
        profile.looking_for === 1
          ? "üë¶"
          : profile.looking_for === 2
            ? "üëß"
            : profile.looking_for === 3
              ? "üë¶üëß"
              : "‚ùì"
      }\n${profile.status ? `Status: ${profile.status}` : "‚õîStatus is not set"}`,
      Markup.keyboard([["‚ù§Ô∏è –õ–∞–π–∫", "‚ùå –î–∏–∑–ª–∞–π–∫"]]).resize()
    );
    return;
  }

  // —è–∫—â–æ —î —Ñ–æ—Ç–æ ‚Üí –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –º–µ–¥—ñ–∞-–≥—Ä—É–ø—É
  const mediaGroup = validPhotos.map((photo: any, index: number) => ({
    type: "photo" as const,
    media: photo.url,
    caption:
      index === 0
        ? `üë§ ${profile.name || "–ë–µ–∑ —ñ–º–µ–Ω—ñ"} (${profile.age || "Age"})\nüìç ${
            profile.city || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
          }\nüìù ${profile.description || "–ë–µ–∑ –æ–ø–∏—Å—É"}\n${
            profile.status ? `Status: ${profile.status}` : "‚õîStatus is not set"
          }`
        : undefined,
  }));

  await bot.telegram.sendMediaGroup(chatId, mediaGroup);
}
const myLikesScene = new Scenes.WizardScene<MyContext>(
  BotScenes.MY_LIKES_SCENE,

  // –ö—Ä–æ–∫ 1: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–µ–ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö –ª–∞–π–∫—ñ–≤
  async (ctx) => {
    const tgId = ctx.from?.id;
    if (!tgId) return ctx.scene.leave();

    const { rows: likes } = await pool.query(
      `SELECT 
    l.from_user_id,
    l.to_user_id,
    l.is_mutual,
    p.name,
    p.age,
    p.city,
    p.description,
    p.looking_for,
    p.min_age,
    p.max_age,
    p.status,
    e.username,
    COALESCE(
        jsonb_agg(DISTINCT jsonb_build_object('url', pp.url)) 
        FILTER (WHERE pp.url IS NOT NULL), '[]'::jsonb
    ) AS photos
FROM tg_profile_likes l
JOIN tg_user_profile p 
    ON p.user_id = l.from_user_id
LEFT JOIN tg_profile_photos pp 
    ON p.user_id = pp.user_id
LEFT JOIN tg_user e 
    ON p.user_id = e.tg_id
WHERE l.to_user_id = $1
  AND l.is_mutual = false
GROUP BY 
    l.from_user_id, l.to_user_id, l.is_mutual,
    p.name, p.age, p.city, p.description, 
    p.looking_for, p.min_age, p.max_age, p.status,
    e.username;
`,
      [tgId]
    );

    if (!likes.length) {
      await ctx.reply(t(ctx.lang, "no_new_likes"), {
        reply_markup: getMainKeyboard(ctx),
      });
      return ctx.scene.leave();
    }

    ctx.scene.session.likesQueue = likes;
    ctx.scene.session.currentIndex = 0;

    await ctx.reply(
      "–í–∞—à—ñ –Ω–æ–≤—ñ –ª–∞–π–∫–∏:",
      Markup.keyboard([["‚ù§Ô∏è –õ–∞–π–∫", "‚ùå –î–∏–∑–ª–∞–π–∫"]]).resize()
    );
    await sendProfileCard(ctx, likes[0]);
    return ctx.wizard.next();
  },

  // –ö—Ä–æ–∫ 2: –û–±—Ä–æ–±–∫–∞ –ª–∞–π–∫—ñ–≤ / –¥–∏–∑–ª–∞–π–∫—ñ–≤
  async (ctx) => {
    if (!ctx.message || !("text" in ctx.message)) return;

    const text = ctx.message.text;
    const queue = ctx.scene.session.likesQueue || [];
    const index = ctx.scene.session.currentIndex || 0;
    const currentProfile = queue[index];
    const userId = ctx.from?.id;
    if (!currentProfile || !userId) return ctx.scene.leave();

    const likedUserId = currentProfile.from_user_id;
    if (text === "‚ù§Ô∏è –õ–∞–π–∫") {
      const { rows } = await pool.query(
        `UPDATE tg_profile_likes 
     SET is_mutual = true 
     WHERE from_user_id = $1 AND to_user_id = $2 
     RETURNING *`,
        [likedUserId, userId]
      );

      if (rows[0]) {
        const mutual = rows[0]; // { from_user_id, to_user_id, is_mutual: true }

        // –±–µ—Ä–µ–º–æ –∞–Ω–∫–µ—Ç—É —Ç–æ–≥–æ, —Ö—Ç–æ —â–æ–π–Ω–æ –ª–∞–π–∫–Ω—É–≤ (to_user_id = current user)
        const { rows: fromProfileRows } = await pool.query(
          `SELECT 
      p.*, 
      u.username,
      COALESCE(
        jsonb_agg(DISTINCT jsonb_build_object('url', pp.url)) 
        FILTER (WHERE pp.url IS NOT NULL), '[]'::jsonb
      ) AS photos
   FROM tg_user_profile p
   LEFT JOIN tg_profile_photos pp 
      ON p.user_id = pp.user_id
   LEFT JOIN tg_user u
      ON p.user_id = u.tg_id
   WHERE p.user_id = $1
   GROUP BY p.user_id, u.username`,
          [mutual.to_user_id]
        );
        const profile = fromProfileRows[0];

        // ------------------------
        // –î–ª—è —Ç–æ–≥–æ, —Ö—Ç–æ –ª–∞–π–∫–Ω—É–≤ –ø–µ—Ä—à–∏–º (from_user_id)
        // ------------------------
        // await bot.telegram.sendMessage(
        //   mutual.from_user_id,
        //   "üíå –£ –≤–∞—Å –≤–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º! –û—Å—å –π–æ–≥–æ –∞–Ω–∫–µ—Ç–∞:"
        // );

        // —á–µ–∫–∞—î–º–æ –¥–æ–∫–∏ –∫–∞—Ä—Ç–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç—å—Å—è
        await sendProfileCardToAnotherUser(mutual.from_user_id, profile);

        // —ñ —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è —Ü—å–æ–≥–æ –¥–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ—á–∞—Ç–∫—É —á–∞—Ç—É
        await bot.telegram.sendMessage(
          mutual.from_user_id,
          `üíå –£ –≤–∞—Å –≤–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫  ${ctx.from.username || ""}`,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "üí¨ –ü–æ—á–∞—Ç–∏ —á–∞—Ç",
                    url: `https://t.me/${ctx.from?.username}`,
                  },
                ],
              ],
            },
          }
        );

        // ------------------------
        // –î–ª—è —Ç–æ–≥–æ, —Ö—Ç–æ —â–æ–π–Ω–æ –ø–æ—Å—Ç–∞–≤–∏–≤ –ª–∞–π–∫ (to_user_id)
        // ------------------------

        const oponentUserid = await pool.query(
          `select p.username,c.name
          
          from tg_user p  
          left join tg_user_profile c on p.tg_id = c.user_id    
          
          
          where p.tg_id = $1`,
          [mutual.from_user_id]
        );

        if (oponentUserid.rows[0]) {
          const username = await oponentUserid.rows[0].username;
          const name = await oponentUserid.rows[0].name;
          await bot.telegram.sendMessage(
            mutual.to_user_id,
            `üíå –£ –≤–∞—Å –≤–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º ${name}.`,
            {
              reply_markup: username
                ? {
                    inline_keyboard: [
                      [
                        {
                          text: "üí¨ –ü–æ—á–∞—Ç–∏ —á–∞—Ç",
                          url: `https://t.me/${username}`,
                        },
                      ],
                    ],
                  }
                : undefined, // –∫–Ω–æ–ø–∫–∏ –Ω–µ–º–∞—î
            }
          );
        }
      }
    }

    if (text === "‚ùå –î–∏–∑–ª–∞–π–∫") {
      await pool.query(
        `delete from tg_profile_likes where from_user_id = $1 and to_user_id = $2`,
        [likedUserId, userId]
      );
    }

    // –ù–∞—Å—Ç—É–ø–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å
    ctx.scene.session.currentIndex++;
    const nextProfile = queue[ctx.scene.session.currentIndex];
    if (nextProfile) {
      await sendProfileCard(ctx, nextProfile);
    } else {
      await ctx.reply(t(ctx.lang, "all_likes_processed"), {
        reply_markup: getMainKeyboard(ctx),
      });
      return ctx.scene.leave();
    }
  }
);

// –û–±—Ä–æ–±–∫–∞ /profile, /help, "back to menu"
myLikesScene.use(async (ctx: MyContext, next) => {
  if (ctx.message && "text" in ctx.message) {
    const text = ctx.message.text;
    const profile = await tgProfileService.getProfileByUserId(
      ctx.message.from.id
    );

    if (
      text.startsWith("/profile") ||
      text.startsWith("/help") ||
      text.includes(t(ctx.lang, "back_to_menu"))
    ) {
      if (profile.user_id) {
        await ctx.reply(t(ctx.lang, "main_menu"), {
          reply_markup: getMainKeyboard(ctx),
        });
      } else {
        await ctx.reply(t(ctx.lang, "main_menu"), {
          reply_markup: getBeforeRegisterKeyboard(ctx),
        });
      }
      return ctx.scene.leave();
    }
  }
  return next();
});

export default myLikesScene;
